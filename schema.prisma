generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @unique @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  riotIGN           String?
  mmr               Int?    @unique
  User              User    @relation("Accounts", fields: [userId], references: [id], onDelete: Cascade)
  MMR               MMR?    @relation("MMR", fields: [mmr], references: [id], onDelete: Cascade)
  UserAccount       User?   @relation("PrimaryRiotAccount")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  // discord name
  team                 Int?
  primaryRiotAccountID String?       @unique
  email                String?       @unique
  emailVerified        DateTime?
  image                String?
  roles                String        @default("0x0")
  flags                String        @default("0x0")
  Status               Status?       @relation("PlayerStatus")
  Team                 Teams?        @relation(fields: [team], references: [id])
  Accolades            Accolades[]
  Records              Records[]
  PlayerStats          PlayerStats[] @relation("UserPlayerStats")
  Substitutes          Substitute[]
  Draft                Draft?
  Captain              Teams?        @relation("Captain")
  GM                   Franchise?    @relation("GM")
  AGM1                 Franchise?    @relation("AGM1")
  AGM2                 Franchise?    @relation("AGM2")
  PrimaryRiotAccount   Account?      @relation("PrimaryRiotAccount", fields: [primaryRiotAccountID], references: [providerAccountId])
  Accounts             Account[]     @relation("Accounts")
  sessions             Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
}

model Accolades {
  id       Int     @id @unique @default(autoincrement())
  userID   String?
  season   Int
  tier     Tier
  accolade String
  Player   User?   @relation(fields: [userID], references: [id])
}

model Records {
  id     Int     @id @unique @default(autoincrement())
  userID String?
  season Int
  tier   Tier
  record String
  Player User?   @relation(fields: [userID], references: [id])
}

model Teams {
  id                 Int           @id @unique @default(autoincrement())
  name               String
  tier               Tier
  active             Boolean       @default(true)
  franchise          Int
  captain            String?       @unique
  midSeasonPlacement Int?
  Franchise          Franchise     @relation(fields: [franchise], references: [id])
  Captain            User?         @relation("Captain", fields: [captain], references: [id])
  Roster             User[]
  HomeMatches        Matches[]     @relation("HomeMatches")
  AwayMatches        Matches[]     @relation("AwayMatches")
  GamesWon           Games[]       @relation("GamesWon")
  PlayerStats        PlayerStats[]
  TeamStats          TeamStats[]
  Substitutes        Substitute[]
}

model Franchise {
  id         Int             @id @unique @default(autoincrement())
  name       String
  slug       String
  active     Boolean         @default(true)
  roleID     String?
  gmID       String?         @unique
  agm1ID     String?         @unique
  agm2ID     String?         @unique
  GM         User?           @relation("GM", fields: [gmID], references: [id], map: "Franchise_GM")
  AGM1       User?           @relation("AGM1", fields: [agm1ID], references: [id], map: "Franchise_AGM1")
  AGM2       User?           @relation("AGM2", fields: [agm2ID], references: [id], map: "Franchise_AGM2")
  Teams      Teams[]
  Brand      FranchiseBrand?
  DraftPicks Draft[]
}

model FranchiseBrand {
  id               Int        @id @unique @default(autoincrement())
  franchise        Int?       @unique
  logo             String?
  discordEmote     String?
  colorPrimary     String?
  colorSecondary   String?
  description      String?   @db.VarChar(999)
  urlDiscord       String?
  urlTwitter       String?
  urlMiscellaneous String?
  Franchise        Franchise? @relation(fields: [franchise], references: [id])
}

model MMR {
  id            Int      @id @unique @default(autoincrement())
  numRanked     Int?
  numCombines   Int?
  numLastSeason Int?
  mmrCombines   Float?
  mmrRanked     Float?
  mmrBase       Float?
  mmrEffective  Float?
  mmrSeason     Float?
  lastPulled    DateTime?
  Account       Account? @relation("MMR")
}

model Substitute {
  id     Int          @id @unique @default(autoincrement())
  userID String
  gameID String?
  team   Int?
  tier   Tier
  User   User         @relation(fields: [userID], references: [id])
  Stats  PlayerStats?
  Game   Games?       @relation(fields: [gameID], references: [gameID])
  Team   Teams?       @relation(fields: [team], references: [id])
}

model Matches {
  matchID       Int       @id @unique @default(autoincrement())
  tier          Tier
  matchType     MatchType
  dateScheduled DateTime
  home          Int?
  away          Int?
  Home          Teams?    @relation("HomeMatches", fields: [home], references: [id], map: "Home_Team")
  Away          Teams?    @relation("AwayMatches", fields: [away], references: [id], map: "Away_Team")
  Games         Games[]
}

model Games {
  gameID        String        @id @unique
  // Forfeits will submit a datetime as the unique ID, and fill in the gameType as FORFEIT
  // Invalid matches include matches that do NOT have ONLY VDC players in the database or out of tier matches
  matchID       Int?
  season        Int           @default(6)
  tier          Tier
  gameType      GameType
  datePlayed    DateTime      @updatedAt
  winner        Int?
  rounds        Int
  roundsWonHome Int
  roundsWonAway Int
  Match         Matches?      @relation(fields: [matchID], references: [matchID])
  WinningTeam   Teams?         @relation("GamesWon", fields: [winner], references: [id])
  PlayerStats   PlayerStats[] @relation("GamePlayerStats")
  TeamStats     TeamStats[]   @relation("GameTeamStats")
  Substitutes   Substitute[]
}

model PlayerStats {
  id            Int         @id @unique @default(autoincrement())
  userID        String
  gameID        String
  team          Int?
  agent         String
  // Use enums - ex. Agent.Chamber
  ratingAttack  Float?
  ratingDefense Float?
  acs           Int?
  kast          Int?
  hsPercent     Float?
  kills         Int?
  deaths        Int?
  assists       Int?
  damage        Int?
  firstKills    Int?
  firstDeaths   Int?
  plants        Int?
  defuses       Int?
  tradeKills    Int?
  tradeDeaths   Int?
  ecoKills      Int?
  ecoDeaths     Int?
  antiEcoKills  Int?
  antiEcoDeaths Int?
  exitKills     Int?
  clutches      Int?
  flex1         String?     @db.VarChar(255)
  flex2         String?     @db.VarChar(255)
  flex3         String?     @db.VarChar(255)
  substituteID  Int?        @unique
  Player        User        @relation("UserPlayerStats", fields: [userID], references: [id])
  Game          Games       @relation("GamePlayerStats", fields: [gameID], references: [gameID], onDelete: Cascade, map: "GamePlayerStats")
  Team          Teams?       @relation(fields: [team], references: [id])
  Substitute    Substitute? @relation(fields: [substituteID], references: [id])
}

model TeamStats {
  id     Int     @id @unique @default(autoincrement())
  gameID String?
  team   Int?
  flex1  Float?
  flex2  Float?
  flex3  Float?
  flex4  Float?
  flex5  Float?
  flex6  Float?
  flex7  Float?
  flex8  Float?
  flex10 Float?
  flex11 Float?
  flex12 Float?
  flex13 Float?
  flex14 Float?
  flex15 String? @db.VarChar(255)
  flex16 String? @db.VarChar(255)
  Game   Games?  @relation("GameTeamStats", fields: [gameID], references: [gameID], onDelete: Cascade, map: "GameTeamStats")
  Team   Teams?  @relation(fields: [team], references: [id])
}

model Status {
  userID            String          @id @unique
  leagueStatus      LeagueStatus    @default(UNREGISTERED)
  contractStatus    ContractStatus?
  contractRemaining Int?
  Player            User            @relation("PlayerStatus", fields: [userID], references: [id], onDelete: Cascade)
}

model Draft {
  id        Int        @id @unique @default(autoincrement())
  season    Int
  tier      Tier
  round     Int
  pick      Int
  keeper    Boolean    @default(false)
  userID    String?    @unique
  franchise Int?
  Franchise Franchise? @relation(fields: [franchise], references: [id])
  Player    User?      @relation(fields: [userID], references: [id])
}

model FAQ {
  id       Int     @id @unique @default(autoincrement())
  question String
  answer   String  @db.VarChar(999)
  visible  Boolean @default(true)
}

model ControlPanel {
  id    Int    @id @unique @default(autoincrement())
  name  String
  value String
  notes String
}

enum Tier {
  PROSPECT
  APPRENTICE
  EXPERT
  MYTHIC
  MIXED
  // Used in non-tier bound combines
}

enum MatchType {
  PRE_SEASON
  BO2
  MID_PLAYOFF
  END_PLAYOFF
}

enum GameType {
  COMBINE
  INVALID
  PRE_SEASON
  SEASON
  FORFEIT
  PLAYOFF
}

enum LeagueStatus {
  UNREGISTERED
  PENDING
  APPROVED
  DRAFT_ELIGIBLE
  FREE_AGENT
  RESTRICTED_FREE_AGENT
  SIGNED
  GENERAL_MANAGER
  RETIRED
  SUSPENDED
}

enum ContractStatus {
  SIGNED
  INACTIVE_RESERVE
  ACTIVE_SUB
}
