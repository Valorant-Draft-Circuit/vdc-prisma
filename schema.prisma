generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @unique
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  riotIGN           String?
  mmr               Int?    @unique
  User              User    @relation("Accounts", fields: [userId], references: [id], onDelete: Cascade)
  MMR               MMR?
  UserAccount       User?   @relation("PrimaryRiotAccount")

  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                   String        @id
  name                 String?
  team                 Int?
  primaryRiotAccountID String?       @unique
  email                String?       @unique
  emailVerified        DateTime?
  image                String?
  roles                String        @default("0x0")
  Accolades            Accolades[]
  accounts             Account[]     @relation("Accounts")
  Draft                Draft?
  AGM1                 Franchise?    @relation("AGM1")
  AGM2                 Franchise?    @relation("AGM2")
  GM                   Franchise?    @relation("GM")
  PlayerStats          PlayerStats[] @relation("UserPlayerStats")
  Substitutes          Substitute[]
  Records              Records[]
  sessions             Session[]
  Status               Status?       @relation("PlayerStatus")
  Captain              Team?         @relation("Captain")
  PrimaryRiotAccount   Account?      @relation("PrimaryRiotAccount", fields: [primaryRiotAccountID], references: [providerAccountId])
  Team                 Team?         @relation(fields: [team], references: [id])

  @@index([team], map: "User_team_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
}

model Accolades {
  id       Int     @id @unique @default(autoincrement())
  userID   String?
  season   Int
  tier     Tier
  accolade String
  Player   User?   @relation(fields: [userID], references: [id])

  @@index([userID], map: "Accolades_userID_fkey")
}

model Records {
  id     Int     @id @unique @default(autoincrement())
  userID String?
  season Int
  tier   Tier
  record String
  Player User?   @relation(fields: [userID], references: [id])

  @@index([userID], map: "Records_userID_fkey")
}

model Team {
  id          Int           @id @unique @default(autoincrement())
  name        String
  tier        Tier
  active      Boolean       @default(true)
  franchise   Int
  captain     String?       @unique
  AwayGames   Games[]       @relation("AwayGames")
  HomeGames   Games[]       @relation("HomeGames")
  PlayerStats PlayerStats[]
  Substitutes Substitute[]
  Captain     User?         @relation("Captain", fields: [captain], references: [id])
  Franchise   Franchise     @relation(fields: [franchise], references: [id])
  TeamStats   TeamStats[]
  Roster      User[]

  @@index([franchise], map: "Team_franchise_fkey")
}

model Franchise {
  id         Int             @id @unique @default(autoincrement())
  name       String
  slug       String
  active     Boolean         @default(true)
  roleID     String?
  gmID       String?         @unique
  agm1ID     String?         @unique
  agm2ID     String?         @unique
  DraftPicks Draft[]
  AGM1       User?           @relation("AGM1", fields: [agm1ID], references: [id], map: "Franchise_AGM1")
  AGM2       User?           @relation("AGM2", fields: [agm2ID], references: [id], map: "Franchise_AGM2")
  GM         User?           @relation("GM", fields: [gmID], references: [id], map: "Franchise_GM")
  Brand      FranchiseBrand?
  Teams      Team[]
}

model FranchiseBrand {
  id               Int        @id @unique @default(autoincrement())
  franchise        Int?       @unique
  logo             String?
  colorPrimary     String?
  colorSecondary   String?
  description      String?
  urlDiscord       String?
  urlTwitter       String?
  urlMiscellaneous String?
  Franchise        Franchise? @relation(fields: [franchise], references: [id])
}

model MMR {
  id            Int     @id @unique @default(autoincrement())
  numRanked     Int?
  numCombines   Int?
  numLastSeason Int?
  mmrBase       Int?
  mmrEffective  Int?
  mmrSeason     Int?
  Account       Account @relation(fields: [id], references: [mmr], onDelete: Cascade)
}

model Substitute {
  id     Int          @id @unique @default(autoincrement())
  userID String
  gameID String?
  team   Int?
  tier   Tier
  User   User         @relation(fields: [userID], references: [id])
  Stats  PlayerStats?
  Game   Games?       @relation(fields: [gameID], references: [gameID])
  Team   Team?        @relation(fields: [team], references: [id])

  @@index([gameID], map: "Substitute_gameID_fkey")
  @@index([team], map: "Substitute_team_fkey")
}

model Matches {
  matchID String   @id @unique @default(uuid())
  date    DateTime @updatedAt
  tier    Tier
  Games   Games[]
}

model Games {
  id            Int           @id @unique @default(autoincrement())
  gameID        String?       @unique
  matchID       String?
  season        Int           @default(6)
  tier          Tier
  gameType      GameType
  date          DateTime      @updatedAt
  home          Int?
  away          Int?
  winner        Int
  rounds        Int
  roundsWonHome Int
  roundsWonAway Int
  Away          Team?         @relation("AwayGames", fields: [away], references: [id], map: "Away_Team")
  Match         Matches?      @relation(fields: [matchID], references: [matchID])
  Home          Team?         @relation("HomeGames", fields: [home], references: [id], map: "Home_Team")
  PlayerStats   PlayerStats[] @relation("GamePlayerStats")
  Substitutes   Substitute[]
  TeamStats     TeamStats[]   @relation("GameTeamStats")

  @@index([matchID], map: "Games_matchID_fkey")
  @@index([home], map: "Home_Team")
  @@index([away], map: "gamesWon")
}

model PlayerStats {
  id            Int         @id @unique @default(autoincrement())
  userID        String
  gameID        String
  team          Int
  agent         Agent
  ratingAttack  Float?
  ratingDefense Float?
  acs           Int?
  hsPercent     Float?
  kills         Int?
  deaths        Int?
  assists       Int?
  firstKills    Int?
  firstDeaths   Int?
  plants        Int?
  defuses       Int?
  tradeKills    Int?
  tradeDeaths   Int?
  ecoKills      Int?
  ecoDeaths     Int?
  antiEcoKills  Int?
  exitKills     Int?
  clutches      Int?
  flex1         String?     @db.VarChar(255)
  flex2         String?     @db.VarChar(255)
  flex3         String?     @db.VarChar(255)
  substituteID  Int?        @unique
  Game          Games       @relation("GamePlayerStats", fields: [gameID], references: [gameID], onDelete: Cascade, map: "GamePlayerStats")
  Team          Team        @relation(fields: [team], references: [id])
  Player        User        @relation("UserPlayerStats", fields: [userID], references: [id])
  Substitute    Substitute? @relation(fields: [substituteID], references: [id])

  @@index([gameID], map: "GamePlayerStats")
  @@index([team], map: "PlayerStats_team_fkey")
  @@index([userID], map: "PlayerStats_userID_fkey")
}

model TeamStats {
  id     Int     @id @unique @default(autoincrement())
  gameID String?
  team   Int?
  flex1  Float?
  flex2  Float?
  flex3  Float?
  flex4  Float?
  flex5  Float?
  flex6  Float?
  flex7  Float?
  flex8  Float?
  flex10 Float?
  flex11 Float?
  flex12 Float?
  flex13 Float?
  flex14 Float?
  flex15 String? @db.VarChar(255)
  flex16 String? @db.VarChar(255)
  Game   Games?  @relation("GameTeamStats", fields: [gameID], references: [gameID], onDelete: Cascade, map: "GameTeamStats")
  Team   Team?   @relation(fields: [team], references: [id])

  @@index([gameID], map: "GameTeamStats")
  @@index([team], map: "TeamStats_team_fkey")
}

model Status {
  userID            String          @id @unique
  leagueStatus      LeagueStatus    @default(UNREGISTERED)
  ContractStatus    ContractStatus?
  contractRemaining Int?            @default(0)
  Player            User            @relation("PlayerStatus", fields: [userID], references: [id], onDelete: Cascade)
}

model Draft {
  id        Int        @id @unique @default(autoincrement())
  season    Int
  tier      Tier
  round     Int
  pick      Int
  keeper    Boolean    @default(false)
  userID    String?    @unique
  franchise Int?
  Franchise Franchise? @relation(fields: [franchise], references: [id])
  Player    User?      @relation(fields: [userID], references: [id])

  @@index([franchise], map: "Draft_franchise_fkey")
}

model FAQ {
  id       Int     @id @unique @default(autoincrement())
  question String
  answer   String  @db.VarChar(999)
  visible  Boolean @default(true)
}

model ControlPanel {
  id    Int    @id @unique @default(autoincrement())
  name  String
  value String
  notes String
}

enum Tier {
  Prospect
  Apprentice
  Expert
  Mythic
}

enum GameType {
  COMBINE
  INVALID
  PRE_SEASON
  SEASON
  FORFEIT
  PLAYOFF
}

enum Agent {
  Brimstone
  Phoenix
  Sage
  Sova
  Viper
  Cypher
  Reyna
  Killjoy
  Breach
  Omen
  Jett
  Raze
  Skye
  Yoru
  Astra
  KAYO
  Chamber
  Neon
  Fade
  Harbor
  Gekko
  Deadlock
  Iso
}

enum LeagueStatus {
  UNREGISTERED
  PENDING
  DRAFT_ELIGIBLE
  FREE_AGENT
  RESTRICTED_FREE_AGENT
  SIGNED
  GENERAL_MANAGER
  RETIRED
  SUSPENDED
}

enum ContractStatus {
  SIGNED
  INACTIVE_RESERVE
  ACTIVE_SUB
}
