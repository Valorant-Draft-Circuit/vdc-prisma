name: DB Drift Check

on:
  schedule:
    - cron: "0 10 * * *"   # daily @ 10:00 UTC
  workflow_dispatch: {}     # allow manual runs

# Prevent overlapping runs
concurrency:
  group: db-drift
  cancel-in-progress: true

env:
  PRISMA_VERSION: ${{ vars.PRISMA_VERSION || '6.15.0' }}

jobs:
  drift:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Compute drift SQL (dev DB → repo schema)
        id: diff
        env:
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
        shell: bash
        run: |
          set -e
          # Produce SQL script to align DB -> schema
          npx --yes prisma@${PRISMA_VERSION} migrate diff \
            --from-url="$DATABASE_URL" \
            --to-schema-datamodel=./schema.prisma \
            --script > /tmp/drift.sql || true

          # Strip SQL comments (--) and /* ... */ and blank lines
          awk '
            BEGIN { inblock=0 }
            # start of block comment
            /\/\*/ { inblock=1 }
            # end of block comment
            /\*\// { gsub(/^.*\*\//,""); inblock=0; next }
            inblock { next }
            # line comments or blank
            /^[[:space:]]*(--|$)/ { next }
            { print }
          ' /tmp/drift.sql > /tmp/drift.body || true

          # Detect real DDL (very conservative)
          if grep -qiE '\b(ALTER|CREATE|DROP|RENAME|ADD|MODIFY|CHANGE|TRUNCATE|CREATE INDEX|DROP INDEX|FOREIGN KEY)\b' /tmp/drift.body; then
            echo "DRIFT=true"  >> $GITHUB_ENV
          else
            echo "DRIFT=false" >> $GITHUB_ENV
          fi

      - name: Upload drift artifact
        if: env.DRIFT == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: prisma-drift-sql
          path: /tmp/drift.sql
          retention-days: 7

      - name: Resolve CODEOWNERS for prisma paths
        if: env.DRIFT == 'true'
        id: owners
        shell: bash
        run: |
          file=".github/CODEOWNERS"
          owners=""
          if [ -f "$file" ]; then
            owners=$(awk 'NF>1 { path=$1; o=""; for (i=2;i<=NF;i++) o=o" "$i;
              if (path=="schema.prisma" || path=="prisma/schema.prisma" ||
                  path=="migrations/" || path=="migrations/**" ||
                  path=="prisma/migrations/" || path=="prisma/migrations/**" ||
                  path=="prisma/**" || path=="**/*.prisma") { print o }
            }' "$file" | tr " " "\n" | grep -E "^@" | sort -u)
          fi
          assignees=$(echo "$owners" | grep -v '/' | sed 's/@//' | paste -sd, -)
          mentions=$(echo "$owners" | paste -sd" " -)
          echo "assignees=$assignees" >> $GITHUB_OUTPUT
          echo "mentions=$mentions"   >> $GITHUB_OUTPUT

      - name: Open or update drift issue
        if: env.DRIFT == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mentions: ${{ steps.owners.outputs.mentions }}
          assignees_csv: ${{ steps.owners.outputs.assignees }}
          script: |
            const fs = require('fs');
            const tag = 'db-drift';
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Ensure label exists
            try { await github.rest.issues.getLabel({ owner, repo, name: tag }); }
            catch {
              await github.rest.issues.createLabel({ owner, repo, name: tag, color: 'B60205',
                description: 'Schema differs from database' }).catch(()=>{});
            }

            let sql = fs.readFileSync('/tmp/drift.sql','utf8');
            if (sql.length > 4000) sql = sql.slice(0, 4000) + '\n-- (truncated; see artifact)';

            const mentions = core.getInput('mentions') || '';
            const body = [
              'Prisma drift detected between **dev DB** and repo `schema.prisma`.',
              '',
              '**Preview (SQL to align DB → schema):**',
              '```sql', sql, '```',
              '',
              'Full SQL attached as workflow artifact: `prisma-drift-sql`.',
              mentions ? `Owners: ${mentions}` : ''
            ].join('\n');

            const { data: existing } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: tag
            });

            const assigneesCsv = core.getInput('assignees_csv') || '';
            const assignees = assigneesCsv ? assigneesCsv.split(',').filter(Boolean) : [];

            if (existing.length) {
              await github.rest.issues.update({ owner, repo, issue_number: existing[0].number, body });
            } else {
              await github.rest.issues.create({ owner, repo, title: 'Prisma drift detected: dev DB out of sync',
                body, labels: [tag], assignees });
            }

      - name: Close drift issue if resolved
        if: env.DRIFT == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = 'db-drift';
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const { data: existing } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: tag
            });
            if (existing.length) {
              await github.rest.issues.update({
                owner, repo, issue_number: existing[0].number,
                state: 'closed', state_reason: 'completed',
                body: (existing[0].body || '') + '\n\n_No drift detected on latest run; closing._'
              });
            }
